## CHECK GUI
ls /usr/bin/*session

## UFW STATUS
sudo service ufw status

## SSH STATUS
sudo service ssh status

## DISTRO
cat /etc/os-release
uname -v

## CHECK USER/GROUP
getent group sudo
getent group user42

## CHECK PWPOLICY
nano /etc/login.defs
nano /etc/pam.d/common-password
chage -l eala-lah/root

## ADD USER/GROUP
sudo adduser evaluator
sudo addgroup evaluating
sudo adduser evaluator evaluating

## CHECK ADDITION
getent group evaluating

## CHECK HOSTNAME
hostname

## EDIT HOSTNAME
sudo nano /etc/hostname
sudo nano /etc/hosts

-----reboot------

## CHECK PART
lsblk

## CHECK SUDO
dpkg -s sudo

## ADD SUDOER
sudo adduser evaluator sudo

## CHECK SUDOER
getent group sudo

## CHECK RULES
sudo nano /etc/sudoers.d/sudo_config

## CHECK SUDOFOLDER
sudo ls /var/log/sudo
sudo nano /var/log/sudo/sudo_config

## UFW
dpkg -s ufw
sudo service ufw status
sudo ufw status numbered
sudo ufw allow 8080
sudo ufw delete 5
sudo ufw delete 9

## SSH
dpkg -s ssh
sudo service ssh status
ssh evaluator@localhost -p 4242

## CRONTAB
sudo crontab -u root -e
sudo systemctl disable cron

## BONUS
sudo service lighttpd status
mariadb
localhost
localhost/wp-admin
localhost:7080

why lightspeed?
worlds 4th most popular web server, 10% of websites


5-1 Architecture
For the architecture of the SO to be shown, you will use the command uname -a ("-a" == "--all"). What this command does is print all information, except if the CPU is unknow or the platform hardware.

5-2 Physical Cores
For the number of fisical cores to be shown we will use the file /proc/cpuinfo, which give us information about the CPU: its type, brand, model, performance, etc. We will use grep "physical id" /proc/cpuinfo | wc -l with the command grep looking inside the file "physical id" and with wc -l to count the line of the grep output.

5-3 Virtual Cores
To show the number of virtual cores is very similar to the previous one. We will again use the file /proc/cpuinfo, but in this case we will use the command grep processor /proc/cpuinfo | wc -l. The usage is practically the same as before, only that instead of counting the lines of "physical id" we will do it with "processor". We do it this way for the same reason as before, the way of quantifying marks 0 if there is a processor.

5-4 RAM
To show the RAM memory we will use the command free to see at the moment information about the RAM, the used part, free, reserved for other resources, etc. For more info about the command we will put free --help. We will use free --mega since that unit of measure appears in the subject.
Once we have run this command, we must filter our search since we do not need all the information that it provides. The first thing we need to show is the used memory, for which we will use the command awk, which processes data based on text files, that is, we can use the data that interests us from a file. Finally, what we will do is compare if the first word of a row is equal to "Mem:" we will print the third word of that row, which will be the used memory. The whole command together would be free --mega | awk '$1 == "Mem:" {print $3}'. In the script the return value of this command will be assigned to a variable that will be concatenated with other variables so that everything is the same as specified in the subject.
To obtain the total memory, the command is practically the same as the previous one, the only thing we must change is that instead of printing the third word of the row, we want the second one free --mega | awk '$1 == "Mem:" {print $2}'.
Finally, we must calculate the % of used memory. The command is again similar to the previous ones, the only modification we will make is in the printing part. As the operation to get the percentage is not exact, it can give us many decimals and in the subject only 2 appear, so we will do the same, that is why we use %.2f so that only 2 decimals are shown. Another thing you may not know is that in printf to show a % you have to put %%. The whole command free --mega | awk '$1 == "Mem:" {printf("(%.2f%%)\n", $3/$2*100)}'.

5-5 Disk memory
To view the occupied and available memory of the disk, we will use the df command, which stands for "disk filesystem", it is used to get a complete summary of the use of disk space. As indicated in the subject, the used memory is shown in MB, so we will then use the -m flag. Next, we will do a grep to only show us the lines that contain "/dev/" and then we will do another grep with the -v flag to exclude lines that contain "/boot". Finally, we will use the awk command and sum the value of the third word of each line to once all the lines are summed, print the final result of the sum. The entire command is as follows: df -m | grep "/dev/" | grep -v "/boot" | awk '{memory_use += $3} END {print memory_use}'.
To obtain the total space, we will use a very similar command. The only differences will be that the values we will sum will be $2 instead of $3 and the other difference is that in the subject the total size appears in Gb, so as the result of the sum gives us the number in Mb we must transform it to Gb, for this we must divide the number by 1024 and remove the decimals.
Finally, we must show a percentage of the used memory. To do this, again, we will use a command very similar to the previous two. The only thing we will change is that we will combine the two previous commands to have two variables, one that represents the used memory and the other the total. Once we have done this, we will perform an operation to obtain the percentage use/total*100 and the result of this operation will be printed as it appears in the subject, between parentheses and with the % symbol at the end. The final command is this: df -m | grep "/dev/" | grep -v "/boot" | awk '{use += $3} {total += $2} END {printf("(%d%%)\n"), use/total*100}'.

5-6 CPU usage percentage
To view the percentage of CPU usage, we will use the vmstat command, which shows system statistics, allowing us to obtain a general detail of the processes, memory usage, CPU activity, system status, etc. We could put no option but in my case I will put an interval of seconds from 1 to 4. We will also use the tail -1 command, which will allow us to produce the output only on the last line, so of the 4 generated, only the last one will be printed. Finally, we will only print word 15, which is the available memory usage. The entire command is as follows: vmstat 1 4 | tail -1 | awk '{print $15}'. The result of this command is only part of the final result since there is still some operation to be done in the script for it to be correct. What should be done is to subtract the amount returned by our command from 100, the result of this operation will be printed with one decimal and a % at the end and the operation would be finished.

5-7 Last reboot
To see the date and time of our last restart, we will use the who command with the -b flag, as this flag will display the time of the last system boot on the screen. As has happened to us before, it shows us more information than we want, so we will filter it and only show what we are interested in, for this we will use the awk command and compare if the first word of a line is "system", the third word of that line will be printed on the screen, a space, and the fourth word. The entire command would be as follows: who -b | awk '$1 == "system" {print $3 " " $4}'.

5-8 LVM active
To check if LVM is active or not, we will use the lsblk command, which shows us information about all block devices (hard drives, SSDs, memories, etc) among all the information it provides, we can see lvm in the type of manager. For this command we will do an if because we will print Yes or No. Basically, the condition we are looking for will be to count the number of lines in which "lvm" appears and if there are more than 0 we will print Yes, if there are 0 we will print No. The entire command would be: if [ $(lsblk | grep "lvm" | wc -l) -gt 0 ]; then echo yes; else echo no; fi.

5-9 TCP connections
To check the number of established TCP connections, we will use the ss command replacing the now obsolete netstat. We will filter with the -ta flag so that only TCP connections are shown. Finally, we will do a grep to see those that are established as there are also only listening and close with wc -l to count the number of lines. The command is as follows: ss -ta | grep ESTAB | wc -l.

5-10 Number of users
We will use the users command which will show us the names of the users there are, knowing this, we will put wc -w to count the number of words in the command output. The entire command is as follows: users | wc -w.

5-11 IP adress & MAC
To obtain the host address, we will use the hostname -I command and to obtain the MAC, we will use the ip link command which is used to show or modify the network interfaces. As more than one interface, IP's etc. appear, we will use the grep command to search for what we want and thus be able to print only what is requested. To do this, we will put ip link | grep "link/ether" | awk '{print $2}' and in this way we will only print the MAC.

5-12 Number of commands executed with sudo
To obtain the number of commands executed with sudo, we will use the journaclctl command, which is a tool that is responsible for collecting and managing the system logs. Next, we will put _COMM=sudo in order to filter the entries by specifying its path. In our case we put _COMM because it refers to an executable script. Once we have filtered the search and only the sudo logs appear, we still need to filter a bit more as when you start or close the root session it also appears in the log, so to finish filtering we will put a grep COMMAND and this will only show the command lines. Finally, we will put wc -l so that the lines are numbered. The entire command is as follows: journalctl _COMM=sudo | grep COMMAND | wc -l). To check that it works correctly, we can run the command in the terminal, put a command that includes sudo and run the command again and it should increase the number of sudo executions.
